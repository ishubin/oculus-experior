package net.mind_engine.oculus.simpletestframework.report;

import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;

import net.mind_engine.oculus.simpletestframework.test.OculusTest;
import net.mind_engine.oculus.simpletestframework.verification.OculusVerificator;
import net.mind_engine.oculus.testrunframework.reporter.Report;
import net.mind_engine.oculus.testrunframework.reporter.ReportCollector;
import net.mind_engine.oculus.testrunframework.reporter.ReportLogo;
import net.mind_engine.oculus.testrunframework.reporter.nodes.ComponentReportNode;
import net.mind_engine.oculus.testrunframework.reporter.nodes.DescriptionReportNode;
import net.mind_engine.oculus.testrunframework.reporter.nodes.ExceptionReportNode;
import net.mind_engine.oculus.testrunframework.reporter.nodes.NodeCollector;
import net.mind_engine.oculus.testrunframework.reporter.nodes.NodeComparator;
import net.mind_engine.oculus.testrunframework.reporter.nodes.ReportNode;
import net.mind_engine.oculus.testrunframework.reporter.nodes.TextReportNode;

/**
 * This is a simple implementation of the report. It is used in
 * {@link OculusTest}
 * 
 * @author Ivan Shubin
 * 
 */

public class OculusReport implements Report{
	private ReportCollector collector;

	public OculusVerificator validator = new OculusVerificator(this);

	public OculusReport() {

	}

	public OculusReport(ReportCollector reportCollector) {
		this.collector = reportCollector;
	}

	public ReportCollector getCollector() {
		return collector;
	}

	public void setReportCollector(ReportCollector collector) {
		this.collector = collector;
	}

	public void action(String name) {
		action(name, null, ReportLogo.ACTION);
	}

	public void action(String name, String details, ReportLogo logo) {
		breakAction();
		ReportNode node = new ComponentReportNode();
		node.setName(name);
		node.setText(details);
		node.setLogo(logo);
		collector.addNode(node);
		collector.gotoNode(node);
	}

	public void subAction(String name) {
		subAction(name, ReportLogo.COMPONENT);
	}

	public void subAction(String name, ReportLogo logo) {
		ReportNode node = new ComponentReportNode();
		node.setName(name);
		node.setLogo(logo);
		collector.addNode(node);
		collector.gotoNode(node);
	}

	public void breakSubAction() {
		collector.goUp();
	}

	public void breakAction() {
		collector.gotoRoot();
	}

	public void error(String msg) {
		error(msg, null, null);
	}

	public void error(String msg, ReportLogo logo) {
		collector.addNode(createTextReportNode(msg, null, logo, ReportNode.ERROR));
	}

	public void error(String msg, String details, ReportLogo logo) {
		collector.addNode(createTextReportNode(msg, details, logo, ReportNode.ERROR));
	}

	public void error(Throwable ex) {
		ex.printStackTrace();
		collector.addNode(createExceptionReportNode(ex));
	}

	public void info(String msg) {
		info(msg, null, null);
	}

	public void info(String msg, ReportLogo logo) {
		collector.addNode(createTextReportNode(msg, null, logo, ReportNode.INFO));
	}

	public void info(String msg, String details, ReportLogo logo) {
		collector.addNode(createTextReportNode(msg, details, logo, ReportNode.INFO));
	}

	private ReportNode createExceptionReportNode(Throwable ex) {
		ExceptionReportNode node = new ExceptionReportNode();
		node.setThrowable(ex);
		node.setType(ReportNode.ERROR);
		node.setLogo(ReportLogo.EXCEPTION);
		node.setTime(new Date());
		return node;
	}

	private TextReportNode createTextReportNode(String msg, String details, ReportLogo logo, String type) {
		TextReportNode node = new TextReportNode();
		node.setText(msg);
		node.setType(type);
		node.setLogo(logo);
		node.setTime(new Date());

		if (details != null) {
			DescriptionReportNode detailsNode = new DescriptionReportNode();
			detailsNode.setText(details);

			node.getChildren().add(detailsNode);
		}

		return node;
	}

	public void warn(String msg) {
		warn(msg, null, null);
	}

	public void warn(String msg, String details, ReportLogo logo) {
		collector.addNode(createTextReportNode(msg, details, logo, ReportNode.WARN));
	}

	public void setActionDescription(String text) {
		ReportNode node = collector.getCaret();
		node.setText(text);
	}

	public ReportNode getReportNode() {
		collector.gotoRoot();
		return collector.getCaret();
	}

	/**
	 * Returns the list of all error nodes
	 * 
	 * @return
	 */
	public Collection<ReportNode> collectErrorNodes() {
		collector.gotoRoot();
		ReportNode reportNode = collector.getCaret();
		NodeCollector nodeCollector = new NodeCollector();
		nodeCollector.setNodeComparator(new NodeComparator() {
			@Override
			public boolean compare(ReportNode reportNode) {
				if (ReportNode.ERROR.equals(reportNode.getType()))
					return true;
				return false;
			}
		});
		reportNode.collectNodes(nodeCollector);

		return nodeCollector.getNodes();
	}

	public Collection<String> collectReasons() {
		Collection<ReportNode> errorNodes = collectErrorNodes();
		
		Collection<String> reasons = new LinkedList<String>();
		for(ReportNode reportNode : errorNodes){
			reasons.add(reportNode.getReason());
		}
		return reasons;
	}
}
