package net.mind_engine.oculus.simpletestframework.test;

import java.lang.reflect.Field;
import java.sql.SQLException;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import java.util.Map;

import net.mind_engine.oculus.simpletestframework.report.OculusReport;
import net.mind_engine.oculus.testrunframework.ClassUtils;
import net.mind_engine.oculus.testrunframework.annotations.Action;
import net.mind_engine.oculus.testrunframework.annotations.ErrorHandler;
import net.mind_engine.oculus.testrunframework.annotations.RollbackHandler;
import net.mind_engine.oculus.testrunframework.annotations.events.AfterTest;
import net.mind_engine.oculus.testrunframework.annotations.events.BeforeAction;
import net.mind_engine.oculus.testrunframework.annotations.events.BeforeErrorHandler;
import net.mind_engine.oculus.testrunframework.annotations.events.BeforeRollback;
import net.mind_engine.oculus.testrunframework.annotations.events.BeforeTest;
import net.mind_engine.oculus.testrunframework.annotations.events.OnTestFailure;
import net.mind_engine.oculus.testrunframework.db.OculusSimpleJdbcDaoSupport;
import net.mind_engine.oculus.testrunframework.db.ProjectBean;
import net.mind_engine.oculus.testrunframework.db.TestBean;
import net.mind_engine.oculus.testrunframework.db.TestRunBean;
import net.mind_engine.oculus.testrunframework.reporter.Report;
import net.mind_engine.oculus.testrunframework.reporter.ReportDesign;
import net.mind_engine.oculus.testrunframework.reporter.ReportLogo;
import net.mind_engine.oculus.testrunframework.reporter.SimpleReportCollector;
import net.mind_engine.oculus.testrunframework.reporter.nodes.ReportNode;
import net.mind_engine.oculus.testrunframework.reporter.render.ReportRender;
import net.mind_engine.oculus.testrunframework.reporter.render.XmlReportRender;
import net.mind_engine.oculus.testrunframework.suite.Suite;
import net.mind_engine.oculus.testrunframework.suite.SuiteSession;
import net.mind_engine.oculus.testrunframework.test.ActionInformation;
import net.mind_engine.oculus.testrunframework.test.ErrorInformation;
import net.mind_engine.oculus.testrunframework.test.RollbackInformation;
import net.mind_engine.oculus.testrunframework.test.TestDefinition;
import net.mind_engine.oculus.testrunframework.test.TestDescriptor;
import net.mind_engine.oculus.testrunframework.test.TestInformation;
import net.mind_engine.oculus.testrunframework.test.TestSession;

import org.apache.commons.lang.StringEscapeUtils;

public abstract class OculusTest {
	protected Report report;
	protected TestSession testSession;
	protected Date startTime;
	protected Suite suite;

	/**
	 * 
	 * @param testInformation
	 */
	@BeforeTest
	public void onBeforeTest(TestInformation testInformation) throws Exception {
		System.out.println("=======BEFORE TEST========");
		suite = SuiteSession.getInstance().getSuite();
		startTime = new Date();
		/*
		 * Checking if it is a root test
		 */
		testSession = TestSession.getTestSession(this);
		if (testSession.isRootSession()) {
			/*
			 * Creating an instance of reporter
			 */
			report = new OculusReport(new SimpleReportCollector());
			testSession.getData().put("report", report);
		}
		else {
			/*
			 * Obtain the instance of reporter from root test session
			 */
			TestSession rootTestSession = TestSession.getRoot(this);
			report = (Report)rootTestSession.getData().get("report");
		}

	}

	@AfterTest
	public void onAfterTest(TestInformation testInformation) throws Exception {
		System.out.println("=======AFTER TEST========");
		OculusSimpleJdbcDaoSupport daoSupport = OculusSimpleJdbcDaoSupport.getInstance();
		TestDescriptor testDescriptor = testInformation.getTestDescriptor();
		TestDefinition testDefinition = testDescriptor.getTestDefinition();

		if (testSession.isRootSession()) {

			/*
			 * Collecting test run data
			 */
			TestRunBean testRunBean = new TestRunBean();
			SuiteSession suiteSession = SuiteSession.getInstance();
			testRunBean.setSuiteRunId(0L);

			if (suiteSession != null) {
				suite = suiteSession.getSuite();
				if (suite != null) {
					testRunBean.setSuiteRunId(suite.getId());
				}

			}

			testRunBean.setName(testInformation.getTestName());
			testRunBean.setDescription(testInformation.getTestDescription());

			/*
			 * Getting test from DB by its name and projectId
			 */

			TestBean test = daoSupport.getTestDAO().getTestByNameProject(testRunBean.getName(), testDefinition.getProjectId());
			if (test != null) {
				testRunBean.setTestId(test.getId());
			}
			else {
				testRunBean.setTestId(0L);
			}
			testRunBean.setStartTime(startTime);
			testRunBean.setEndTime(new Date());

			ReportNode reportNode = report.getReportNode();

			ReportRender reportRender = new XmlReportRender();
			String reportData = reportRender.render(reportNode);

			testRunBean.setReport(reportData);

			if (testInformation.getThrowable() != null || reportNode.hasError()) {
				testRunBean.setStatus("FAILED");
				
				/*
				 * Fetching reasons and translating them to the needed format
				 */
				Collection<String> reasonsList = report.collectReasons();
				StringBuffer buffer = new StringBuffer();
				boolean bSep = false;
				for (String reason : reasonsList) {
					if (bSep)
						buffer.append("<r>");
					buffer.append(StringEscapeUtils.escapeXml(ReportDesign.removeDecorationTags(reason)));
					bSep = true;
				}
				testRunBean.setReasons(buffer.toString());

				// Setting test status to testInformation so it could be fetched
				// by test-run-manager system
				testInformation.setStatus(TestInformation.FAILED);
			}
			else if (reportNode.hasWarn()) {
				testRunBean.setStatus("WARNING");

				// Setting test status to testInformation so it could be fetched
				// by test-run-manager system
				testInformation.setStatus(TestInformation.WARNING);
			}
			else {
				testRunBean.setStatus("PASSED");

				// Setting test status to testInformation so it could be fetched
				// by test-run-manager system
				testInformation.setStatus(TestInformation.PASSED);
			}

			// Obtaining the projects id
			ProjectBean projectBean = daoSupport.getProjectDAO().getProjectByPath(testDefinition.getProjectId());
			Long projectId = 0L;
			if (projectBean != null) {
				projectId = projectBean.getId();
			}
			testRunBean.setProjectId(projectId);
			testRunBean.setId(daoSupport.getTestRunDAO().create(testRunBean));
			
			/*
			 * Exporting test run parameters to database for this specific test run
			 * 
			 */
			exportTestRunParameters(daoSupport, testRunBean.getId(), testInformation.getTestDescriptor());
			
			/*
			 * Adding just created test run to the suite
			 */
			if(suite.getTestRuns()==null){
				suite.setTestRuns(new LinkedList<TestRunBean>());
			}
			suite.getTestRuns().add(testRunBean);
		}
	}
	
	private void exportTestRunParameters(OculusSimpleJdbcDaoSupport daoSupport, Long testRunId, TestDescriptor testDescriptor) throws SQLException{
		//daoSupport.getTestRunDAO().createTestRunParameters(testRunBean.getId(), name, value, input);
		//testDescriptor.getInputParameters();
		
		/*
		 * Saving input parameter values```
		 */
		Map<String, Field> inputParametersMap = testDescriptor.getInputParameters();
		for(Map.Entry<String, Field> parameter : inputParametersMap.entrySet()){
			Object value = testDescriptor.getTestInputParameterValue(parameter.getValue());
			String name = parameter.getKey();
			String strValue;
			
			if(value!=null){
				strValue = ClassUtils.convertParameterToString(value.getClass(), value);
			}
			else strValue = "null";
			daoSupport.getTestRunDAO().createTestRunParameters(testRunId, name, strValue, true);
		}
		/*
		 * Saving output parameter values
		 */
		Map<String, Field> outputParametersMap = testDescriptor.getOutputParameters();
		for(Map.Entry<String, Field> parameter : outputParametersMap.entrySet()){
			Object value = testDescriptor.getTestOutputParameterValue(parameter.getValue());
			String name = parameter.getKey();
			String strValue = null;
			if(value!=null){
				strValue = ClassUtils.convertParameterToString(value.getClass(), value);
			}
			daoSupport.getTestRunDAO().createTestRunParameters(testRunId, name, strValue, false);
		}
		
	}

	@BeforeAction
	public void onBeforeAction(ActionInformation actionInformation) {
		Action annotation = actionInformation.getActionMethod().getAnnotation(Action.class);
		if (annotation.report()) {
			report.action(actionInformation.getActionName());
		}
	}

	@BeforeRollback
	public void onBeforeRollback(RollbackInformation rollbackInformation) {
		RollbackHandler annotation = rollbackInformation.getMethod().getAnnotation(RollbackHandler.class);
		if (annotation.report()) {
			report.action(rollbackInformation.getName(), null, ReportLogo.ROLLBACK);
		}
	}

	@BeforeErrorHandler
	public void onBeforeError(ErrorInformation errorInformation) {
		ErrorHandler annotation = errorInformation.getMethod().getAnnotation(ErrorHandler.class);
		if (annotation.report()) {
			report.action(errorInformation.getName());
		}
	}

	@OnTestFailure
	public void onTestFailure(Throwable throwable) {
		report.error(throwable);
	}

	public Report getReport() {
		return report;
	}

	public void setReport(Report report) {
		this.report = report;
	}

}
