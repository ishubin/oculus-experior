package net.mind_engine.oculus.testrunframework.test;

import java.io.IOException;
import java.io.OutputStreamWriter;

import net.mind_engine.oculus.testrunframework.utils.XmlUtils;

import org.apache.commons.lang.StringEscapeUtils;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 * Used for saving and reading the test definition from xml source
 * 
 * @author Ivan Shubin
 * 
 */
public class XmlTestParser {
    public static TestDefinition parse(Node testNode) throws Exception {
        TestDefinition testDefinition = new TestDefinition();

        String strCustomId = XmlUtils.getNodeAttribute(testNode, "customId");
        if (strCustomId != null) {
            testDefinition.setCustomId(Long.parseLong(strCustomId));
        }

        testDefinition.setMapping(XmlUtils.getNodeAttribute(testNode, "mapping"));
        testDefinition.setName(XmlUtils.getNodeAttribute(testNode, "name"));
        testDefinition.setProjectId(XmlUtils.getNodeAttribute(testNode, "projectId"));

        NodeList nodeList = testNode.getChildNodes();

        for (int i = 0; i < nodeList.getLength(); i++) {
            Node node = nodeList.item(i);
            if (node.getNodeType() == Node.ELEMENT_NODE) {
                if (node.getNodeName().equals("parameter")) {
                    // Loading the test parameter
                    String parameterName = XmlUtils.getNodeAttribute(node, "name");
                    String parameterValue = node.getTextContent();
                    testDefinition.getParameters().put(parameterName, new TestParameter(parameterName, parameterValue));
                }
                else if (node.getNodeName().equals("dependency")) {
                    // Loading the test dependency
                    String parameterName = XmlUtils.getNodeAttribute(node, "name");
                    String prerequisiteCustomId = XmlUtils.getNodeAttribute(node, "prerequisiteCustomId");
                    String prerequisiteName = XmlUtils.getNodeAttribute(node, "prerequisiteName");

                    TestDependency dependency = new TestDependency();
                    dependency.setDependentParameterName(parameterName);
                    dependency.setPrerequisiteParameterName(prerequisiteName);
                    dependency.setPrerequisiteTestId(Long.parseLong(prerequisiteCustomId));

                    testDefinition.getDependencies().add(dependency);
                }
                else if (node.getNodeName().equals("description")) {
                    String description = node.getTextContent();
                    testDefinition.setDescription(description);
                }
            }
        }

        return testDefinition;
    }

    public static void save(OutputStreamWriter writer, TestDefinition test) throws IOException {
        writer.write("\n<test customId=\"");
        writer.write(test.getCustomId().toString());
        writer.write("\" mapping=\"");
        writer.write(StringEscapeUtils.escapeXml(test.getMapping()));
        writer.write("\" name=\"");
        writer.write(StringEscapeUtils.escapeXml(test.getName()));
        writer.write("\" projectId=\"");
        writer.write(StringEscapeUtils.escapeXml(test.getProjectId()));
        writer.write("\">\n");
        for (TestParameter parameter : test.getParameters().values()) {

            writer.write("\n<parameter name=\"");
            writer.write(StringEscapeUtils.escapeXml(parameter.getName()));
            writer.write("\">");
            writer.write(StringEscapeUtils.escapeXml(parameter.getValue()));
            writer.write("</parameter>\n");
        }

        for (TestDependency dependency : test.getDependencies()) {
            writer.write("\n<dependency name=\"");
            writer.write(StringEscapeUtils.escapeXml(dependency.getDependentParameterName()));
            writer.write("\" prerequisiteCustomId=\"");
            writer.write(StringEscapeUtils.escapeXml(dependency.getPrerequisiteTestId().toString()));
            writer.write("\" prerequisiteName=\"");
            writer.write(StringEscapeUtils.escapeXml(dependency.getPrerequisiteParameterName()));
            writer.write("\"/>\n");
        }
        
        if(test.getDescription()!=null){
            writer.write("<description>");
            writer.write(StringEscapeUtils.escapeXml(test.getDescription()));
            writer.write("</description>");
        }
        writer.write("</test>");

    }

}
