package net.mind_engine.oculus.testrunframework.test;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.mind_engine.oculus.testrunframework.suite.Suite;
import net.mind_engine.oculus.testrunframework.test.testloader.TestLoaderFactory;


/**
 * Defines the test meta-data such as: class-path, name, parameters, dependencies
 * @author Ivan Shubin
 *
 */
public class TestDefinition implements Serializable
{
    private static final long serialVersionUID = -345871240987352L;
    /**
     * The customId field is used only in suite when there is need to fetch test dependencies  
     */
    private Long customId;
    
    /**
     * Contains the path to the test. By default is used as a classpath.
     * Format: "loaderName:path"
     * 
     *  where
     *  <ul>
     *      <li>loaderName - is the name of loader configured in TestLoadFactory
     *      <li>path - a path which will be later passed to the specified concrete TestLoadFactory
     *  </ul>
     * 
     */
    private String mapping;
    private Suite suite;
    private String name;
    private Long testId;
    private String description; // Used for more information about the test run
    private String projectId;
    private Map<String, TestParameter> parameters = new HashMap<String, TestParameter>();
    private List<TestDependency> dependencies = new ArrayList<TestDependency>();
    private Class<?> testClass;
    
    public boolean hasDependencies(Long prerequisiteCustomId)
    {
        for(TestDependency dependency : dependencies)
        {
            if(dependency.getPrerequisiteTestId().equals(prerequisiteCustomId))
            {
                return true;
            }
        }
        return false;
    }
    public Long getCustomId()
    {
        return customId;
    }
    public void setCustomId(Long customId)
    {
        this.customId = customId;
    }
    public Suite getSuite()
    {
        return suite;
    }
    public void setSuite(Suite suite)
    {
        this.suite = suite;
    }
    public String getName()
    {
        return name;
    }
    public void setName(String name)
    {
        this.name = name;
    }
    public Long getTestId()
    {
        return testId;
    }
    public void setTestId(Long testId)
    {
        this.testId = testId;
    }
    public String getProjectId()
    {
        return projectId;
    }
    public void setProjectId(String projectId)
    {
        this.projectId = projectId;
    }
    public Map<String, TestParameter> getParameters()
    {
        return parameters;
    }
    public void setParameters(Map<String, TestParameter> parameters)
    {
        this.parameters = parameters;
    }
    public List<TestDependency> getDependencies()
    {
        return dependencies;
    }
    public void setDependencies(List<TestDependency> dependencies)
    {
        this.dependencies = dependencies;
    }
    public Class<?> getTestClass()
    {
        return testClass;
    }
    public void setTestClass(Class<?> testClass)
    {
        this.testClass = testClass;
    }
    
    public String getMapping() {
        return mapping;
    }
    public void setMapping(String mapping) {
        this.mapping = mapping;
    }
    public Class<?> fetchTestClass()
    {
        if(testClass==null)
        {
            try
            {
                if(mapping==null)throw new NullPointerException("The mapping for "+toString()+" is not specified");
    
                int pos = mapping.indexOf(":");
                String path = null;
                String testLoaderName = null;
                if(pos>0){
                    //fetching the specified test loader
                    testLoaderName = mapping.substring(0, pos);
                    path = mapping.substring(pos+1);
                }
                else
                {
                    //Using the default test loader
                    testLoaderName = TestLoaderFactory.getTestLoaderFactory().getDefaultTestLoaderName();
                    path = mapping;
                }
                testClass = TestLoaderFactory.forTestLoader(testLoaderName).loadTestClass(path);
            }
            catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
        return testClass;
    }

    @Override
    public String toString() {
        return "TestDefinition: "+name+" ("+mapping+")";
    }
    public void setDescription(String description) {
        this.description = description;
    }
    public String getDescription() {
        return description;
    }

}
