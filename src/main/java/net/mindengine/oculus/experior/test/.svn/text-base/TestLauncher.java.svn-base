package net.mind_engine.oculus.testrunframework.test;

import java.io.File;
import java.lang.reflect.Constructor;

import net.mind_engine.oculus.testrunframework.Config;
import net.mind_engine.oculus.testrunframework.SuiteInterruptListener;
import net.mind_engine.oculus.testrunframework.TestRunListener;
import net.mind_engine.oculus.testrunframework.suite.Suite;
import net.mind_engine.oculus.testrunframework.suite.SuiteListener;
import net.mind_engine.oculus.testrunframework.suite.SuiteRunner;
import net.mind_engine.oculus.testrunframework.suite.UnitedSuiteRunner;
import net.mind_engine.oculus.testrunframework.suite.XmlSuiteParser;

public class TestLauncher {

	private Suite suite;
	private SuiteListener suiteListener = null;
	private TestRunListener testRunListener;
	private SuiteInterruptListener suiteInterruptListener;

	public TestLauncher() {

	}

	public void launch() {
		SuiteRunner suiteRunner;
		if (suite.getUniteTests()) {
			suiteRunner = new UnitedSuiteRunner();
			System.out.println("Using United Suite Runner");
		} else {
			System.out.println("Using Default Suite Runner");
			suiteRunner = new SuiteRunner();
		}
		launch(suiteRunner);
	}

	public void launch(SuiteRunner suiteRunner) {
		suiteRunner.setSuite(suite);
		suiteRunner.setTestRunListener(testRunListener);
		suiteRunner.setSuiteListener(getSuiteListener());
		suiteRunner.setSuiteInterruptListener(suiteInterruptListener);
		suiteRunner.runSuite();
	}

	public SuiteListener getSuiteListener() {
		if (suiteListener == null) {
			try {
				Config config = Config.getInstance();
				String className = config.get(Config.SUITE_LISTENER);
				Class<?> suiteListenerClass = Class.forName(className);
				Constructor<?> constructor = suiteListenerClass.getConstructor();
				suiteListener = (SuiteListener) constructor.newInstance();
			} catch (Exception e) {
				throw new RuntimeException(e);
			}
		}
		return suiteListener;
	}

	/**
	 * Used to fetch the command line parameters by name
	 * @param name
	 * @param args
	 * @return
	 */
	public static String commandLineParameter(String name, String[] args, boolean checkPresence) {
		for (int i = 0; i < args.length - 1; i += 2) {
			if (args[i].equals(name)) {
				return args[i + 1];
			}
		}
		throw new IllegalArgumentException("\""+name+"\" parameter is not defined");
	}

	public static void runTask(File file)throws Throwable{
		if(file.isFile() && file.getName().toLowerCase().endsWith(".xml")){
			System.out.println("Reading the "+file.getName()+" suite");
			TestLauncher testLauncher = new TestLauncher();
			Suite suite = XmlSuiteParser.parse(file.getPath());
			testLauncher.setSuite(suite);
			testLauncher.launch();
		}
		else if(file.isDirectory()){
			File[]files = file.listFiles();
			for(File childFile : files){
				runTask(childFile);
			}
		}
	}
	
	public static void main(String[] args) throws Throwable {
		if ((args.length % 2) != 0)
			throw new Exception("The number of arguments is not correct");
		
		
		String runall = commandLineParameter("runall", args, false);
		if(runall!=null){
			runTask(new File(runall));
		}
		else {
			String suitePath = commandLineParameter("suite", args, true);
			TestLauncher testLauncher = new TestLauncher();
			Suite suite = XmlSuiteParser.parse(suitePath);
			testLauncher.setSuite(suite);
			testLauncher.launch();
		}
	}

	public void setSuite(Suite suite) {
		this.suite = suite;
	}

	public Suite getSuite() {
		return suite;
	}

	public void setTestRunListener(TestRunListener testRunListener) {
		this.testRunListener = testRunListener;
	}

	public TestRunListener getTestRunListener() {
		return testRunListener;
	}

	public void setSuiteInterruptListener(SuiteInterruptListener suiteInterruptListener) {
		this.suiteInterruptListener = suiteInterruptListener;
	}

	public SuiteInterruptListener getSuiteInterruptListener() {
		return suiteInterruptListener;
	}

}
