package net.mind_engine.oculus.testrunframework.test;

import java.util.HashMap;
import java.util.Map;

/**
 * Singleton class that could be used in tests to obtain some needed objects
 * (e.g. Report, Selenium etc.)
 * 
 * @author ishubin
 * 
 */
public class TestSession {
	
	private TestSession parent;
	private TestSession child;
	protected TestRunner testRunner;

	private Map<String, Object> data = new HashMap<String, Object>();
	
	/*
	 * This will be used as a storage for all test sessions
	 */
	private final static Map<Object, TestSession> testSessions = new HashMap<Object, TestSession>(); 

	public static TestSession create(TestRunner testRunner){
		/*
		 * Checking if the test session for this test was already created
		 */
		if(testSessions.containsKey(testRunner.getTestInstance())){
			return testSessions.get(testRunner.getTestInstance());
		}
		else{
			return new TestSession(testRunner);
		}
	}
	
	private TestSession(TestRunner testRunner) {
		
		if(testRunner.getParent()!=null){
			/*
			 * Attaching test session to parent test session
			 */
			testRunner.getParent().getTestSession().attach(this);
		}
		/*
		 * Saving just created test session in global test sessions map
		 */
		testSessions.put(testRunner.getTestInstance(), this);
	}

	protected TestSession getLast() {
		if (child != null) {
			return child.getLast();
		}
		return this;
	}

	protected void attach(TestSession child) {
		if (child != null) {
			child.parent = this;
			this.child = child;
		}
	}

	public static void destroy(TestSession testSession) {
		if(testSession.getParent()!=null){
			testSession.getParent().destroyChild(testSession);
		}
		else{
			removeTestSessionFromGlobalMap(testSession);
		}
	}
	
	private static void removeTestSessionFromGlobalMap(TestSession testSession){
		for(Map.Entry<Object, TestSession> entry : testSessions.entrySet()){
			if(entry.getValue()==testSession){
				testSessions.remove(entry.getKey());
				return;
			}
		}
	}

	protected void destroyChild(TestSession testSession) {
		if (child == testSession) {
			child.parent = null;
			removeTestSessionFromGlobalMap(child);
			child = null;
		}
		else if (child != null) {
			child.destroyChild(testSession);
		}
	}

	public static TestSession getTestSession(Object test) {
		return testSessions.get(test);
	}

	protected void setParent(TestSession parent) {
		this.parent = parent;
	}
	
	public TestSession getParent() {
		return parent;
	}

	/**
	 * Returns the root test session object for the specified instance of the test
	 * @param test Instance of the test
	 * @return Root session for the specified instance for the test
	 */
	public static TestSession getRoot(Object test) {
		TestSession testSession = TestSession.getTestSession(test);
		return testSession.getRoot();
	}
	/**
	 * 
	 * @return root test session instance for the current test session
	 */
	public TestSession getRoot(){
		if(parent!=null){
			return parent.getRoot();
		}
		else return this;
	}

	public Boolean isRootSession() {
		if (parent==null){
			return true;
		}
		else {
			return false;
		}
	}

	public void setData(Map<String, Object> data) {
		this.data = data;
	}

	public Map<String, Object> getData() {
		return data;
	}
}
