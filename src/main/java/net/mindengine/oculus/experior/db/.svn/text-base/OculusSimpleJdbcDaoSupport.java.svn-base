package net.mind_engine.oculus.testrunframework.db;

import java.sql.Connection;
import java.util.List;


import net.mind_engine.oculus.testrunframework.Config;
import net.mind_engine.oculus.testrunframework.db.mappers.MapperFactory;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.simple.SimpleJdbcDaoSupport;
import org.springframework.jdbc.datasource.DriverManagerDataSource;

public class OculusSimpleJdbcDaoSupport extends SimpleJdbcDaoSupport
{
    protected Log logger = LogFactory.getLog(getClass());
    
    
    private static OculusSimpleJdbcDaoSupport _instance = null;
    private OculusSimpleJdbcDaoSupport()
    {
    	super();
    	Config config = Config.getInstance();
    	//this.setDataSource(dataSource)
    	DriverManagerDataSource dataSource = new DriverManagerDataSource();
    	
    	dataSource.setDriverClassName(config.get(Config.REPORTING_DB_DRIVERCLASSNAME));
    	dataSource.setUrl(config.get(Config.REPORTING_DB_URL));
    	dataSource.setUsername(config.get(Config.REPORTING_DB_USERNAME));
    	dataSource.setPassword(config.get(Config.REPORTING_DB_PASSWORD));
    	setDataSource(dataSource);
    }
    public static OculusSimpleJdbcDaoSupport getInstance()
    {
    	if(_instance==null)
    	{
    		_instance = new OculusSimpleJdbcDaoSupport();
    	}
    	return _instance;
    }
    
    @SuppressWarnings("unchecked")
    public <T> List<T> query(String sql, Class<T> mapperClass, Object...args) throws Exception
    {
        logQuery(sql, args);
        if(args==null)return (List<T>) getSimpleJdbcTemplate().query(sql,MapperFactory.getRowMapper(mapperClass));
        
        MapSqlParameterSource map = new MapSqlParameterSource();
        for(int i=0;i<args.length;i+=2)
        {
            map.addValue((String)args[i], args[i+1]);
        }
        return (List<T>) getSimpleJdbcTemplate().query(sql,MapperFactory.getRowMapper(mapperClass),map);
    }
	
	/**
	 * Returns the long value of counts of entities returned by sql query
	 */
	public Long count(String sql, Object...args) throws Exception
	{
	    MapSqlParameterSource map = new MapSqlParameterSource();
        for(int i=0;i<args.length;i+=2)
        {
            map.addValue((String)args[i], args[i+1]);
        }
	    return getSimpleJdbcTemplate().queryForLong(sql, map);
	}
	
	public int update(String sql, Object...args) throws Exception
    {
	    logQuery(sql, args);
        if(args==null)return getSimpleJdbcTemplate().update(sql);
        
        MapSqlParameterSource map = new MapSqlParameterSource();
        for(int i=0;i<args.length;i+=2)
        {
            map.addValue((String)args[i], args[i+1]);
        }
        return getSimpleJdbcTemplate().update(sql,map);
    }
	
    
    private void logQuery(String sql, Object[]args)
    {
        if(args!=null)
        {
            
        }
        for(int i=0;i<args.length-1;i+=2)
        {
            sql = sql.replace(":"+args[i], ""+args[i+1]);
        }
        
        logger.info(sql);
    }
    
    
    public ProjectDAO getProjectDAO()
    {
    	return new ProjectDAO(this);
    }
    
    public SuiteRunDAO getSuiteRunDAO()
    {
    	return new SuiteRunDAO(this);
    }
    
    public TestDAO getTestDAO()
    {
    	return new TestDAO(this);
    }
    
    public TestRunDAO getTestRunDAO()
    {
    	return new TestRunDAO(this);
    }
    
    public Connection getSQLConnection()
    {
    	return super.getConnection();
    }
}
